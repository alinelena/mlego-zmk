/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <dt-bindings/zmk/matrix_transform.h>
#include <dt-bindings/led/led.h>

/ {

    model = "mlego m65, rev4";
    compatible = "mlego,rev4", "st,stm32f401";

    chosen {
        zmk,kscan = &kscan0;
        zephyr,display = &oled;
        zmk,underglow = &led_strip;
        zephyr,console = &cdc_acm_uart0;
/*
        zmk,led-capslock = &led_capslock;
        zmk,led-numlock = &led_numlock;
        zmk,led-compose = &led_scrollock;
*/
    };

    kscan0: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        label = "KSCAN";
        diode-direction = "col2row";

        row-gpios
            = <&gpiob 10 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpioa  5 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpioa  6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpioa  7 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpiob  0 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            ;

        col-gpios
            = <&gpiob 14 GPIO_ACTIVE_HIGH>
            , <&gpioa  8 GPIO_ACTIVE_HIGH>
            , <&gpioa 10 GPIO_ACTIVE_HIGH>
            , <&gpioa 15 GPIO_ACTIVE_HIGH>
            , <&gpiob  3 GPIO_ACTIVE_HIGH>
            , <&gpiob  4 GPIO_ACTIVE_HIGH>
            , <&gpiob  5 GPIO_ACTIVE_HIGH>
            , <&gpiob  7 GPIO_ACTIVE_HIGH>
            , <&gpioa  1 GPIO_ACTIVE_HIGH>
            , <&gpioa  2 GPIO_ACTIVE_HIGH>
            , <&gpioa  3 GPIO_ACTIVE_HIGH>
            , <&gpioa  4 GPIO_ACTIVE_HIGH>
            , <&gpiob  1 GPIO_ACTIVE_HIGH>
            ;
    };

    mlego_encoder: mlego_encoder {
        compatible = "alps,ec11";
        label = "MLEGO_ENCODER";
        a-gpios = <&gpioa 0 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&gpiob 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        resolution = <4>;
    };

    sensors {
      compatible = "zmk,keymap-sensors";
      sensors = <&mlego_encoder>;
    };
/*
    ext-power {
        compatible = "zmk,ext-power-generic";
        init-delay-ms = <20>;
        control-gpios = <&gpiob 15 GPIO_ACTIVE_HIGH>;
    };
*/
 /*  
      led_indicators {
        compatible = "gpio-leds";
        label = "LED indicators";
        led_capslock: led_capslock {
            gpios = <&gpioc 13 GPIO_ACTIVE_LOW>;
            label = "Capslock LED";
        };
        led_numlock: led_numlock {
            gpios = <&gpiob 13 GPIO_ACTIVE_HIGH>;
            label = "Num lock LED";
        };
        led_scrollock: led_scrollock {
            gpios = <&gpiob 12 GPIO_ACTIVE_HIGH>;
            label = "Scroll lock LED";
        };
    };
*/
};

&mlego_encoder {
    status = "okay";
};

&spi1{
                        status = "disabled";


};
&i2c1 {
      status = "okay";
       clock-frequency = <I2C_BITRATE_STANDARD>;

      oled: ssd1306@3c {
        compatible = "solomon,ssd1306fb";
        inversion-on;
        reg = < 0x3c >;
        label="DISPLAY";
        width = < 0x80 >;
        height = < 0x20 >;
        segment-offset = < 0x0 >;
        page-offset = < 0x0 >;
        display-offset = < 0x0 >;
        multiplex-ratio = < 0x1f >;
        com-sequential;
        prechargep = < 0x22 >;
      };
    };

&spi2 {
  status = "okay";
  pinctrl-0 = <&spi2_sck_pb13 &spi2_nss_pb12
         &spi2_miso_pb14 &spi2_mosi_pb15>;
  pinctrl-names = "default";
  // Unused pins, needed for SPI definition, but not used by the ws2812 driver itself.

  led_strip: ws2812@0 {
    compatible = "worldsemi,ws2812-spi";
    label = "WS2812";

    /* SPI */
    reg = <0>; /* ignored, but necessary for SPI bindings */
    spi-max-frequency = <4000000>;

    /* WS2812 */
    chain-length = <20>; /* arbitrary; change at will as long as enough current*/
    spi-one-frame = <0x70>;
    spi-zero-frame = <0x40>;
    color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
  };
};
&zephyr_udc0 {
  status="ok";
  cdc_acm_uart0: cdc_acm_uart0 {
    compatible = "zephyr,cdc-acm-uart";
    label = "CDC_ACM_0";

  };
};
