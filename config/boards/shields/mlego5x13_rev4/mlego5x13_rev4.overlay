/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <dt-bindings/zmk/matrix_transform.h>
#include <dt-bindings/led/led.h>

/ {

    model = "mlego m65, rev4";
    compatible = "mlego,rev4", "st,stm32f401";

    chosen {
        zmk,kscan = &kscan0;
        zephyr,display = &oled;
		    zmk,underglow = &led_strip;
        zephyr,code-partition = &code_partition;
    };

    kscan0: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        label = "KSCAN";
        diode-direction = "col2row";

        row-gpios
            = <&gpiob 10 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpioa  5 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpioa  6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpioa  7 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpiob  0 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            ;

        col-gpios
            = <&gpiob 14 GPIO_ACTIVE_HIGH>
            , <&gpioa  8 GPIO_ACTIVE_HIGH>
            , <&gpioa 10 GPIO_ACTIVE_HIGH>
            , <&gpioa 15 GPIO_ACTIVE_HIGH>
            , <&gpiob  3 GPIO_ACTIVE_HIGH>
            , <&gpiob  4 GPIO_ACTIVE_HIGH>
            , <&gpiob  5 GPIO_ACTIVE_HIGH>
            , <&gpiob  7 GPIO_ACTIVE_HIGH>
            , <&gpioa  1 GPIO_ACTIVE_HIGH>
            , <&gpioa  2 GPIO_ACTIVE_HIGH>
            , <&gpioa  3 GPIO_ACTIVE_HIGH>
            , <&gpioa  4 GPIO_ACTIVE_HIGH>
            , <&gpiob  1 GPIO_ACTIVE_HIGH>
            ;
    };

    mlego_encoder: mlego_encoder {
        compatible = "alps,ec11";
        label = "MLEGO_ENCODER";
        a-gpios = <&gpioa 0 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&gpiob 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        resolution = <4>;
    };
    sensors {
      compatible = "zmk,keymap-sensors";
      sensors = <&mlego_encoder>;
    };
};

&mlego_encoder {
    status = "okay";
};

&flash0 {
    partitions {
        compatible = "fixed-partitions";
        #address-cells = <1>;
        #size-cells = <1>;

        boot_partition: partition@0 {
            label = "adafruit_boot";
            reg = <0x00000000 0x00010000>;
        };

        code_partition: partition@10000 {
            label = "code_partition";
            reg = <0x00010000 0x00028000>;
        };

        /*
        * The final 32 KiB is reserved for the application.
        * Storage partition will be used by FCB/LittleFS/NVS
        * if enabled.
        */
        storage_partition: partition@38000 {
            label = "storage";
            reg = <0x00038000 0x00008000>;
        };
    };
};

&i2c1{
  pinctrl-0 = <&i2c1_scl_pb8 &i2c1_sda_pb9>;
  pinctrl-names = "default";
  status = "okay";
  oled: ssd1306@3c {
    compatible = "solomon,ssd1306fb";
    reg = <0x3c>;
    label = "DISPLAY";
    width = <128>;
    height = <32>;
    segment-offset = <0>;
    page-offset = <0>;
    display-offset = <0>;
    multiplex-ratio = <31>;
    segment-remap;
    com-invdir;
    com-sequential;
    prechargep = <0x22>;
  };
};

&spi1 {
	status = "okay";
	pinctrl-0 = <&spi1_sck_pa5 &spi1_nss_pa4
		     &spi1_miso_pa6 &i2s2_sd_pb15>;
	pinctrl-names = "default";
	// Unused pins, needed for SPI definition, but not used by the ws2812 driver itself.

	led_strip: ws2812@0 {
		compatible = "worldsemi,ws2812-spi";
		label = "WS2812";

		/* SPI */
		reg = <0>; /* ignored, but necessary for SPI bindings */
		spi-max-frequency = <4000000>;

		/* WS2812 */
		chain-length = <8>; /* arbitrary; change at will as long as enough current*/
		spi-one-frame = <0x70>;
		spi-zero-frame = <0x40>;
		color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
	};
};
